import argparse
import os
import torch

def str2bool(v):
    return v.lower() in ('yes', 'y', 'true', 't', '1')

def parse_opt():
    print(torch.cuda.is_available())
    print('The numbers of Gpus is:', torch.cuda.device_count())
    parser = argparse.ArgumentParser()

    # data parameters
    parser.add_argument('--dataroot', type=str, default='/home/dell/PycharmProjects/datasets/HDR/Kalantari17')
    parser.add_argument('--dataset_name', type=str, default='sig17align')
    parser.add_argument('--max_dataset_size', type=int, default=float('inf'))
    parser.add_argument('--batch_size', type=int, default=16)
    parser.add_argument('--patch_size', type=int, default=128)
    parser.add_argument('--shuffle', type=str2bool, default=True)
    parser.add_argument('-j', '--num_dataloader', default=8, type=int)
    parser.add_argument('--drop_last', type=str2bool, default=True)

    # device parameters
    parser.add_argument('--gpu_ids', type=int, default=0,
                        help='Separate the GPU ids by `,`, using all GPUs by default. '
                             'eg, `--gpu_ids 0`, `--gpu_ids 2,3`, `--gpu_ids -1`(CPU)')
    parser.add_argument('--checkpoints_dir', type=str, default='./pretrained_models')
    parser.add_argument('-v', '--verbose', type=str2bool, default=True)
    parser.add_argument('--suffix', default='', type=str)

    # model parameters
    parser.add_argument('--name', type=str, default='ahdrnet_stage2',
                        help='Name of the folder to save models and logs.')
    parser.add_argument('--model', type=str, default='selfhdr2')
    parser.add_argument('--network', type=str, default='AHDRNet')
    parser.add_argument('--load_path', type=str, default='',
                        help='Will load pre-trained model if load_path is set')
    parser.add_argument('--load_iter', type=int, default=1,
                        help='Load parameters if > 0 and load_path is not set. '
                             'Set the value of `last_epoch`')
    parser.add_argument('--chop', type=str2bool, default=False)
    parser.add_argument('--stage0_inference', type=str2bool, default=False,
                        help='Inference the 1-stage model on training dataset')
    parser.add_argument('--stru_lable_path', type=str, default='',
                        help='Path of structure label generated by 1-stage model')

    # training parameters
    parser.add_argument('--init_type', type=str, default='default',
                        choices=['default', 'normal', 'xavier',
                                 'kaiming', 'orthogonal', 'uniform'],
                        help='`default` means using PyTorch default init functions.')
    parser.add_argument('--init_gain', type=float, default=0.02)
    parser.add_argument('--optimizer', type=str, default='Adam',
                        choices=['Adam', 'SGD', 'RMSprop'])
    parser.add_argument('--niter', type=int, default=1000)
    parser.add_argument('--niter_decay', type=int, default=0)
    parser.add_argument('--lr_policy', type=str, default='step')
    parser.add_argument('--lr_decay_iters', type=int, default=200)
    parser.add_argument('--lr', type=float, default=0.0001)

    # Optimizer
    parser.add_argument('--load_optimizers', type=str2bool, default=False,
                        help='Loading optimizer parameters for continuing training.')
    parser.add_argument('--weight_decay', type=float, default=0)
    # Adam
    parser.add_argument('--beta1', type=float, default=0.9)
    parser.add_argument('--beta2', type=float, default=0.999)
    # SGD & RMSprop
    parser.add_argument('--momentum', type=float, default=0)
    # RMSprop
    parser.add_argument('--alpha', type=float, default=0.99)

    # visualization parameters
    parser.add_argument('--print_freq', type=int, default=100)
    parser.add_argument('--test_every', type=int, default=1000)
    parser.add_argument('--save_epoch_freq', type=int, default=1)
    parser.add_argument('--calc_metrics', type=str2bool, default=True)
    parser.add_argument('--save_imgs', type=str2bool, default=False)

    args = parser.parse_args()
    return args
